// src/main.rs - Point d'entr√©e du projet EREEA
mod map;
mod robot;
mod simulation;
mod utils;

// Import des types depuis lib.rs
use final_project::{Position, TerrainType, Cell, ResourceType, RobotBehavior};
use map::MapGenerator;
use robot::Robot;
use simulation::SimulationEngine;
use utils::NoiseGenerator;
use colored::Colorize;

fn main() {
    // Banni√®re de d√©marrage
    println!("{}", "üöÄ EREEA - Essaim de Robots pour l'Exploration Astrobiologique".bright_blue().bold());
    println!("{}", "   Projet Rust - Simulation de robots autonomes".bright_cyan());
    println!();

    // Test des utilitaires de g√©n√©ration
    println!("{}", "=== Test des utilitaires ===".bright_yellow());
    let noise_gen = NoiseGenerator::new(42, 0.1);
    let test_noise = noise_gen.get_noise(5.0, 10.0);
    let test_terrain = noise_gen.get_terrain(5.0, 10.0);
    println!("üåä Valeur de bruit: {:.3}", test_noise);
    println!("üó∫Ô∏è  Terrain g√©n√©r√©: {:?}", test_terrain);

    // G√©n√©ration de la carte
    println!("\n{}", "=== G√©n√©ration de la carte ===".bright_yellow());
    let map_generator = MapGenerator::new(42, 20, 15);
    let game_map = map_generator.generate();
    println!("‚úÖ Carte g√©n√©r√©e: {}x{}", game_map[0].len(), game_map.len());

    // Cr√©ation des robots
    println!("\n{}", "=== Cr√©ation des robots ===".bright_yellow());
    let mut robots = Vec::new();

    robots.push(Robot::new(0, Position::new(1, 1), RobotBehavior::Explorateur));
    robots.push(Robot::new(1, Position::new(2, 1), RobotBehavior::Collecteur));
    robots.push(Robot::new(2, Position::new(3, 1), RobotBehavior::Scientifique));

    for robot in &robots {
        println!("ü§ñ Robot {} cr√©√©: {:?} √† ({},{})",
                 robot.id, robot.behavior, robot.position.x, robot.position.y);
    }

    // Test des types de base
    println!("\n{}", "=== Tests des types de base ===".bright_yellow());
    let pos = Position::new(5, 10);
    let mut cell = Cell::new(TerrainType::Plaine);
    cell.add_resource(ResourceType::Energie, 50);
    cell.add_resource(ResourceType::Mineraux, 25);

    println!("üìç Position de test: {:?}", pos);
    println!("üó∫Ô∏è  Cellule cr√©√©e: terrain = {:?}", cell.terrain);
    println!("‚ö° Ressources: {:?}", cell.resources);

    // V√©rification des modules
    println!("\n{}", "=== Modules charg√©s ===".bright_cyan());
    println!("‚úÖ üìç Map - G√©n√©ration de cartes");
    println!("‚úÖ ü§ñ Robot - Gestion des robots");
    println!("‚úÖ ‚öôÔ∏è  Simulation - Moteur de simulation");
    println!("‚úÖ üîß Utils - Utilitaires et g√©n√©ration proc√©durale");

    // Lancement de la simulation
    println!("\n{}", "=== Lancement de la simulation ===".bright_green());
    let mut simulation = SimulationEngine::new(game_map, robots);
    simulation.run(500); 

    println!("\n{}", "üéØ Simulation termin√©e ! Projet EREEA op√©rationnel.".bright_green().bold());
}